{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%run Functionality.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Universe=pd.read_excel(data_path+'TMT Universe Data.xlsx',\n",
    "                       #index_col='Ticker',\n",
    "                       #usecols=['Ticker','CIK'],\n",
    "                       converters={'CIK':str}\n",
    "                      )\n",
    "Filing_Tracker=pd.read_excel(result_path+'Collected.xlsx',\n",
    "                             index_col='Ticker',\n",
    "                             converters={'CIK':str})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Universe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Filing_Tracker.head(45)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Filing_Tracker.tail(55)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def collect_company_RDs(ticker,cik,override=False):\n",
    "    print(ticker,end=': ')\n",
    "    folder_path=os.path.join(sample_path,ticker)\n",
    "    if(override):\n",
    "        try:\n",
    "            os.mkdir(folder_path)\n",
    "        except OSError as error:\n",
    "            print('Skip')\n",
    "            return None\n",
    "    else:\n",
    "        pass\n",
    "    files=get_10Ks_names(cik)\n",
    "    for i in range(0,min(10,len(files))):\n",
    "        yr=str(2020-i)\n",
    "        file_path=folder_path+'/'+yr+'.txt'\n",
    "        print(yr,end='...')\n",
    "        try:\n",
    "            txt=get_Risk_Disc(cik,files[i],'TOC')\n",
    "            with open(file_path,'w') as f: f.write(txt)\n",
    "            with open(TOC_File_1,'a') as f: f.write(ticker+'--'+yr+'\\n')\n",
    "        except:\n",
    "            with open(TOC_File_2,'a') as f: f.write(ticker+'--'+yr+'\\n')\n",
    "            try:\n",
    "                txt=get_Risk_Disc(cik,files[i],'TOC2')\n",
    "                with open(file_path,'w') as f: f.write(txt)\n",
    "                with open(TOC2_File_1,'a') as f: f.write(ticker+'--'+yr+'\\n')\n",
    "            except:\n",
    "                with open(TOC2_File_2,'a') as f: f.write(ticker+'--'+yr+'\\n')\n",
    "                try:\n",
    "                    txt=get_Risk_Disc(cik,files[i],'ID')            \n",
    "                    with open(file_path,'w') as f: f.write(txt)\n",
    "                    with open(ID_File_1,'a') as f: f.write(ticker+'--'+yr+'\\n')\n",
    "                except:\n",
    "                    with open(ID_File_2,'a') as f: f.write(ticker+'--'+yr+'\\n')\n",
    "                    try:\n",
    "                        txt=get_Risk_Disc(cik,files[i],'Text')\n",
    "                        with open(file_path,'w') as f: f.write(txt)\n",
    "                        with open(Text_File_1,'a') as f: f.write(ticker+'--'+yr+'\\n')\n",
    "                    except:\n",
    "                        with open(Text_File_2,'a') as f: f.write(ticker+'--'+yr+'\\n')\n",
    "\n",
    "\n",
    "    print('Complete')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def collect_company_RDs_(ticker,cik,methods=False,override=False):\n",
    "    print(ticker,end=': ')\n",
    "    folder_path=os.path.join(sample_path,ticker)\n",
    "    if(override):\n",
    "        try:\n",
    "            os.mkdir(folder_path)\n",
    "        except OSError as error:\n",
    "            print('Skip')\n",
    "            return None\n",
    "    else:\n",
    "        pass\n",
    "    files=get_10Ks_names(cik)\n",
    "    for i in range(1,1+min(10,len(files))):\n",
    "        yr=str(2021-i)\n",
    "        file_path=folder_path+'/'+yr+'.txt'\n",
    "        print(yr,end='...')\n",
    "        done=False\n",
    "        for method in methods:\n",
    "            if(done):\n",
    "                continue\n",
    "            else:\n",
    "                method_path=log_paths[method]\n",
    "                try:\n",
    "                    txt=get_Risk_Disc(cik,files[-i],method)\n",
    "                    with open(file_path,'w') as f: f.write(txt)\n",
    "                    with open(method_path[0],'a') as f: f.write(ticker+'--'+yr+'\\n')\n",
    "                    done=True\n",
    "                except:\n",
    "                    with open(method_path[1],'a') as f: f.write(ticker+'--'+yr+'\\n')\n",
    "                    continue\n",
    "    print('Complete')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_stocks=Filing_Tracker[Filing_Tracker.Filed==False]\n",
    "new_stocks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for tick,cik in zip(new_stocks.index,new_stocks.CIK):\n",
    "    collect_company_RDs_(tick,cik,['TOC','TOC2','ID','Text','Text2'],True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_remaining_RDs():\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ticker='CNSL'\n",
    "method='Text2'\n",
    "cik=Filing_Tracker.loc[ticker].CIK\n",
    "base_path=samples_path+ticker+'/'\n",
    "files=get_10Ks_names(cik)\n",
    "for i in range(0,2):\n",
    "    y=str(2020-i)\n",
    "    print(y,end='...')\n",
    "    path=base_path+y+'.txt'\n",
    "    try:\n",
    "        txt=get_Risk_Disc(cik,files[i],method)\n",
    "        with open(path,'w') as f:f.write(txt)\n",
    "        with open(log_paths[method][0],'a') as f: f: f.write(ticker+'--'+y+'\\n')\n",
    "    except:\n",
    "        with open(log_paths[method][1],'a') as f: f: f.write(ticker+'--'+y+'\\n')\n",
    "        pass\n",
    "    finally:\n",
    "        pass\n",
    "print('COMPLETE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "txt=get_Risk_Disc(cik,files[2],method)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "path='/Users/george/Desktop/Language Analysis/Risk Factors/Samples/{stock}/{yr}.txt'\n",
    "for stock,cik in stock_cik:\n",
    "    print(stock,end=':  ')\n",
    "    path1=path.format(stock=stock,yr='{yr}')\n",
    "    i=0\n",
    "    files=get_10Ks_names(cik)\n",
    "    try:\n",
    "        for f in files:\n",
    "            yr=2020-i\n",
    "            path2=path1.format(yr=yr)\n",
    "            print(yr,end='...')\n",
    "            txt=get_Risk_Disc(cik,files[i],'TOC2')\n",
    "            with open(path2,'w') as f:\n",
    "                f.write(txt)\n",
    "                pass\n",
    "            i+=1\n",
    "        pass\n",
    "    except:\n",
    "        print('ERROR')\n",
    "    finally:\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "soup=bs(requests.get('https://www.sec.gov/Archives/edgar/data/1067837/000119312519054296/0001193125-19-054296.txt',headers=headers).content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "head=soup.find_all(text=re.compile('^ITEM[\\W]+1A',re.I))\n",
    "head"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "S=soup.new_tag('Risk Section')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "head=tail.find_next(text=re.compile('^ITEM[\\W]+1A',re.I))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "head"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "head.insert_before(S)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "L=list(takewhile(lambda tag:tag.text!=tail,head.find_all_next()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "L[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for t in takewhile(lambda tag:tag.text!=tail,head.find_all_next()):\n",
    "    S.append(t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "txt=' \\n '.join(S.stripped_strings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(txt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "IAC={\n",
    "    2016:'https://ir.iac.com/node/17881/html',\n",
    "    2017:'https://ir.iac.com/node/21831/html',\n",
    "    2018:'https://ir.iac.com/node/22596/html',\n",
    "    2019:'https://ir.iac.com/node/23611/html'\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "DIS={\n",
    "    2017:'https://otp.tools.investis.com/clients/us/the_walt_disney_company/SEC/sec-show.aspx?Type=html&FilingId=12398732&Cik=0001001039'\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "soup=bs(requests.get(DIS[2017],headers=headers).content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "text=parse_RD_text(soup)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(sample_path+'IAC/2016.txt','w') as f:f.write(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "soup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
